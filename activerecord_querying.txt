++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Article.column_names

Article.methods
Article.methods.size

a = Article.new
a.title = "Beginning Rails 4"
a.publisher = "Apress"
a.published_at = "2013-10-21"
a.save

b = Article.new
b.new_record?

Article.count

c = Article.new(:title => "Introduction to Active Record", :body => "Active Record is Rails's default ORM..", :published_at =>Date.today)
c.save

Article.create(:title => "RubyConf 2013", :body => "The annual RubyConf will take place in..", :published_at => '2013-04-13')


attributes = { :title => "Rails Pub Nite", :body => "Rails Pub Nite is every
3rd Monday of each month, except in December.", :published_at => "2013-04-13"}

Article.create(attributes)


article = Article.first
article.title = "Rails 4 is great"
article.published_at = Time.now
article.save




article = Article.first
article.update_attributes(:title => "RailsConf2013", :published_at => 1.day.ago)


article = Article.last
article.destroy
Article.destroy(1)
Article.destroy([2,3])


Article.delete(4)
Article.delete([2,3])
Article.delete_all("published_at < '2011-01-01'")


article = Article.new
article.save
article.errors.any?
article.errors.full_messages
article.errors.messages(:title)
article.errors.size
article.valid?

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Article.all
Article.first
Article.last

Article.find(:id)
Article.find(1)

begin
Article.find(1037)
rescue ActiveRecord::RecordNotFound
puts "We couldn't find that record"
end

#throws error
Article.find(3)
#gives nil if article with id doesnot exist
Article.find_by_id(3)


Article.where(:title => 'RailsConf').first
Article.where(:title => 'RailsConf').all

User.where(:name => 'Linus').first


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

articles = Article.order("published_at")
articles = Article.order ('published_at DESC')

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

a = Article.all
a.each { |article| puts article.title }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

article = Article.new

article.save

article.errors.any?


article.errors.full_messages

 article.errors.messages(:title)


article.errors.size

article.valid?

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ADVANCED FINDING


The most basic condition style is the hash syntax. Active Record takes the Hash passed to the where method and turns
the keys into column names and the values into parameters to match.


Article.where(title: 'Advanced Active Record') 

#USING AN SQL FRAGMENT

Article.where("title = 'Advanced Active Record'")

#some conditions only sql can do

Article.where("created_at > '23-04-2013' OR body NOT LIKE '%model%'")

Article.where("created_at > '23-04-2013' AND body NOT LIKE '%model%'")

#using an array condition syntax - to prevent sql injection

Article.where("published_at < ?", Time.now)

#for a cross check reference
Article.where("published_at < ?", Time.now).to_sql

Article.where("created_at = ?", Article.last.created_at)

#more conditions
Article.where("created_at = ? OR body LIKE ?", Article.last.created_at, 'model')

#reuse the same term in multiple places in your condition.
Article.where("title LIKE :search OR body LIKE :search", {search: '%association%'})

#using association proxies
User.first.articles.all

# for two or more conditions
Article.where("created_at = ? OR body LIKE ?", Article.last.created_at, 'model')

#creating an associated object
 User.first.articles.create(title: 'Private', body: 'Body here..')



 SOME ACTIVE RECORD FINDER METHODS

 where(conditions)
 order
 limit
 joins
 includes


Article.order("title ASC") 
Article.order("title DESC").limit(2)

Article.limit(1)

Article.joins(:comments)

Article.includes(:comments)

