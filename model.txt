MODEL - models in Rails correspond to database table names.



Article model expects a table named articles.
model names are camel-cased singular(ArticleImage) and correspond to lower-cased plural table names(article_images).

rails generate model
rails generate model NAME [field[:type][:index] field[:type][:index]] [options]
rails generate model Article title:string body:text published_at:datetime --skip-migration

rails generate model Article


VALIDATIONS

  validates :title, presence: true



A model contains all the logic that governs its citizenship in the world of your application. 
In the model, you can define how it interacts with other models. Models need to relate to one another
all the logic for a particular table is contained in one place: the model.

FAT model - Instead of performing model-related logic in other places you keep it in the model, thus making it fat and helps your code stay DRY


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


                                                USING ASSOCIATIONS
Rails convention, the foreign-key column is the singular, lowercase name of the target class with _id appended
the model that contains the “belong_to” needs to have the foreign key column in it.


has_one | has_many | belongs_to | has_and_belongs_to_many


                                                ONE-TO-ONE ASSOCIATION

class User < ActiveRecord::Base
 has_one :profile
end

class Profile < ActiveRecord::Base
 belongs_to :user
end

create user
create profile

user.profile = profile

user.profile


#Returns a new Profile object that has been instantiated with attributes and linked to user through a foreign key and saved
user.create_profile name: 'Jane Doe', color: 'pink'

#Returns a new Profile object that has been instantiated with attributes and linked to user through a foreign key but hasn’t yet been saved
user.build_profile name: 'Jane Doe', color: 'pink'


user.profile.nil?

common options  -> :class_name     has_one :profile, class_name: 'Account'
                   :conditions     has_one :profile, conditions: "active = 1"
                   :foreign_key    has_one :profile, foreign_key: "account_id"
                   :order          has_one :profile, order: "created_at DESC"

specifies that an associated object should be removed.  :destroy - assoc object is deleted using destroy method. if set to :delete the assoc object is deleted using the destroy method. if set to :nullify the associated object's foreign key is set to null

                   :dependent      has_one :profile, dependent: :destroy



                                           ONE-TO-MANY ASSOCIATIONS

class Article < ActiveRecord::Base
  belongs_to :user
end

class User < ActiveRecord::Base
  belongs_many :articles
end

user = User.first
user.articles

user.articles << Article.first

user.articles.size
user.articles.count

Article.first.user
Article.first.user_id


METHODS
 user.articles
 user.articles=(articles)
 user.articles << Article.last
 user.articles.empty?
 user.articles.size

 user.article_ids
 
 user.articles.clear #clears all associated objects from the association by setting their foreign key to null

 user.articles.find  #performs find within the scope of the user

 user.articles.build(attributes={})

 user.articles.create(attributes={})

 user.articles.create title: 'Associations', body: 'Active Record makes working with associations easy..'



COMMON METHODS

  :class_name     has_many :articles, class_name: 'Account
  :conditions     has_many :articles, conditions: "active = 1"
  :foreign_key    has_many :articles, foreign_key: "account_id"
  :order          has_many :articles, order: "created_at DESC"
  :dependent      has_many :articles, dependent: :destroy



                                           MANY-TO-MANY ASSOCIATIONS

two tables are connected to multiple rows on bothsides - to add categories to articles
the has_and_belongs_to_many(habtm) association works by relying on a join table

The join table sits between the tables you want to join: articles and categories. Not surprisingly, then, the join table in this case is called articles_categories in alphabetical order.


class Article < ActiveRecord::Base
  belongs_to :user
end

class User < ActiveRecord::Base
  belongs_many :articles
end
  
  Article.first.categories << Category.last


METHODS: 
      
      article.categories.any?

      article.categories.size

      category.articles.empty?
      category.articles.size

      category.articles.first.title


                                         CREATING A RICH MANY-TO-MANY ASSOCIATIONS

to put extra data on the join model, create a rich many to many association using has_many :through                                         

the rich many-to-many relationship between comments and users, through articles

class Comment < ActiveRecord::Base
  belongs_to :article
end


class Article < ActiveRecord::Base
  has_many :comments
end

class User < ActiveRecord::Base
 has_many :replies, :through => :articles, :source => :comments
end

#adding a comment to an article that belongs to a user
Article.first.comments << comment

User.first.replies

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

model’s errors() and invalid?() methods
we can use the any?() method of the error list to see whether there is an error associated with a particular attribute.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

You give the name of the field that you want to order by

 has_many :articles, -> { order('published_at DESC') }
 has_many :articles, -> { order('published_at ASC') }

 You can also specify a secondary order by adding a comma between arguments. 

  has_many :articles, -> { order('published_at DESC, title ASC')}

 dependency specifying
 
  has_many :articles, -> { order('published_at DESC, title ASC')}, :dependent => :destroy
  has_many :articles, -> { order('published_at DESC, title ASC')}, :dependent => :nullify


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


DEFAULT SCOPE

sorting the results, which in most cases is done on the primary key id.

class Category < ActiveRecord::Base
  default_scope lambda { order('categories.name') }
end

NAMED SCOPE

class Article < ActiveRecord::Base
 scope :published, lambda { where("articles.published_at IS NOT NULL") }
 scope :draft, lambda { where("articles.published_at IS NULL") }
 scope :recent, lambda { published.where("articles.published_at > ?", 1.week.ago.to_date) }
end

#to make scope more useful define scope that can receive param and search accordingly

class Article < ActiveRecord::Base
  scope :where_title, lambda { |term| where("articles.title LIKE ?", "%#{term}%") }
end

 Article.where_title("monolithic")
 Article.published
 Article.draft
 Article.recent

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 attr_accessor :password: This defines an accessor attribute, password, at the top of the class
body. It tells Ruby to create reader and writer methods for password. Because the password
column doesn’t exist in your table anymore, a password method isn’t created automatically
by Active Record. Still, you need a way to set the password before it’s encrypted, so you make
your own attribute to use. This works like any model attribute, except that it isn’t persisted to
the database when the model is saved.
